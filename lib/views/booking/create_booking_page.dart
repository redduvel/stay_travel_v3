// Create Booking Page
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_date_pickers/flutter_date_pickers.dart';
import 'package:loading_indicator/loading_indicator.dart';
import 'package:stay_travel_v3/bloc/auth/auth_bloc.dart';
import 'package:stay_travel_v3/bloc/booking/booking_bloc.dart';
import 'package:stay_travel_v3/bloc/booking/booking_event.dart';
import 'package:stay_travel_v3/bloc/booking/booking_state.dart';
import 'package:stay_travel_v3/models/booking.dart';
import 'package:stay_travel_v3/models/hotel.dart';
import 'package:stay_travel_v3/themes/colors.dart';
import 'package:stay_travel_v3/themes/text_styles.dart';
import 'package:intl/intl.dart';
import 'package:stay_travel_v3/utils/routes.dart';
import 'package:stay_travel_v3/widgets/custom_button.dart';

class CreateBookingPage extends StatefulWidget {
  final Hotel hotel;
  const CreateBookingPage({super.key, required this.hotel});

  @override
  State<CreateBookingPage> createState() => _CreateBookingPageState();
}

class _CreateBookingPageState extends State<CreateBookingPage> {
  DatePeriod _selectedPeriod =
      DatePeriod(DateTime.now(), DateTime.now().add(const Duration(days: 7)));
  final TextEditingController _notesController = TextEditingController();

  String _getWeekDayText(DateTime date, {bool isStart = true}) {
    final now = DateTime.now();
    final weekdaysNominative = [
      '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
      '–≤—Ç–æ—Ä–Ω–∏–∫',
      '—Å—Ä–µ–¥–∞',
      '—á–µ—Ç–≤–µ—Ä–≥',
      '–ø—è—Ç–Ω–∏—Ü–∞',
      '—Å—É–±–±–æ—Ç–∞',
      '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    ];
    final weekdaysAccusative = [
      '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
      '–≤—Ç–æ—Ä–Ω–∏–∫',
      '—Å—Ä–µ–¥—É',
      '—á–µ—Ç–≤–µ—Ä–≥',
      '–ø—è—Ç–Ω–∏—Ü—É',
      '—Å—É–±–±–æ—Ç—É',
      '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    ];
    final nextWeekdays = [
      '—Å–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
      '—Å–ª–µ–¥—É—é—â–∏–π –≤—Ç–æ—Ä–Ω–∏–∫',
      '—Å–ª–µ–¥—É—é—â—É—é —Å—Ä–µ–¥—É',
      '—Å–ª–µ–¥—É—é—â–∏–π —á–µ—Ç–≤–µ—Ä–≥',
      '—Å–ª–µ–¥—É—é—â—É—é –ø—è—Ç–Ω–∏—Ü—É',
      '—Å–ª–µ–¥—É—é—â—É—é —Å—É–±–±–æ—Ç—É',
      '—Å–ª–µ–¥—É—é—â–µ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    ];

    final difference = date.difference(now).inDays;
    if (difference < 7 && date.weekday >= now.weekday) {
      return '–≤ –±–ª–∏–∂–∞–π—à–∏–π ${weekdaysAccusative[date.weekday - 1]}';
    } else if (difference < 14) {
      return '–≤ ${nextWeekdays[date.weekday - 1]}';
    } else {
      return '${weekdaysNominative[date.weekday - 1]}, ${DateFormat('d MMMM', 'ru').format(date)}';
    }
  }

  String _getFormattedDateRange() {
    final startDateText = _getWeekDayText(_selectedPeriod.start, isStart: true);
    final endDateText = DateFormat('d MMMM', 'ru').format(_selectedPeriod.end);
    final endDateWeekday = DateFormat('EEEE', 'ru').format(_selectedPeriod.end);

    // Handle accusative case for the end date weekday
    final endDateWeekdayAccusative = {
          '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
          '–≤—Ç–æ—Ä–Ω–∏–∫': '–≤—Ç–æ—Ä–Ω–∏–∫',
          '—Å—Ä–µ–¥–∞': '—Å—Ä–µ–¥—É',
          '—á–µ—Ç–≤–µ—Ä–≥': '—á–µ—Ç–≤–µ—Ä–≥',
          '–ø—è—Ç–Ω–∏—Ü–∞': '–ø—è—Ç–Ω–∏—Ü—É',
          '—Å—É–±–±–æ—Ç–∞': '—Å—É–±–±–æ—Ç—É',
          '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
        }[endDateWeekday] ??
        endDateWeekday;

    return '–í—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–µ—Ö–∞—Ç—å $startDateText, –∏ –≤—ã–µ—Ö–∞—Ç—å –≤ $endDateWeekdayAccusative, $endDateText.';
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          '–°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏',
          style: AppTextStyles.subheaderStyle,
        ),
        centerTitle: true,
      ),
      body: Padding(
          padding: const EdgeInsets.all(7.5),
          child: Padding(
            padding: const EdgeInsets.all(7.5),
            child: CustomScrollView(
              scrollDirection: Axis.vertical,
              slivers: [
                SliverToBoxAdapter(
                  child: Card(
                    child: Padding(
                      padding: const EdgeInsets.all(7.5),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(widget.hotel.name, style: AppTextStyles.subheaderBoldStyle,),
                          Text('–ê–¥—Ä–µ—Å: ${widget.hotel.address}', style: AppTextStyles.subheaderBoldStyle.copyWith(
                            fontSize: 18,
                            fontWeight: FontWeight.w400
                          )),
                        ],
                      ),
                    ),
                  ),
                ),
                const SliverToBoxAdapter(
                  child:SizedBox(height: 10)
                ),
                SliverToBoxAdapter(
                  child: Card(
                    child: Column(
                      children: [
                        const Text(
                          '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
                          style: AppTextStyles.subheaderBoldStyle,
                          textAlign: TextAlign.center,
                        ),
                        RangePicker(
                          datePickerStyles: DatePickerRangeStyles(
                              selectedDateStyle: const TextStyle(
                                  color: AppColors.background, fontSize: 20)),
                          selectedPeriod: _selectedPeriod,
                          onChanged: (DatePeriod newPeriod) {
                            setState(() {
                              _selectedPeriod = newPeriod;
                            });
                          },
                          firstDate: DateTime.now(),
                          lastDate: DateTime(2025),
                        ),
                      ],
                    ),
                  ),
                ),
                SliverToBoxAdapter(
                  child: Text(
                    _getFormattedDateRange(),
                    style: AppTextStyles.subheaderBoldStyle
                        .copyWith(fontSize: 16, fontWeight: FontWeight.w400),
                    textAlign: TextAlign.center,
                  ),
                ),
                const SliverToBoxAdapter(child: SizedBox(height: 10)),
                SliverToBoxAdapter(
                  child: Card(
                    child: Padding(
                      padding: const EdgeInsets.all(7.6),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.center,
                        children: [
                          Text('–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.', style: AppTextStyles.subheaderBoldStyle.copyWith(
                            fontSize: 18
                          ), textAlign: TextAlign.center,),
                          const SizedBox(height: 10),
                          TextField(
                            controller: _notesController,
                            decoration: const InputDecoration(
                              hintText: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è...',
                              labelStyle: TextStyle(color: AppColors.orange2),
                              focusedBorder: OutlineInputBorder(
                                  borderSide: BorderSide(color: AppColors.orange2)),
                              border: OutlineInputBorder(
                                  borderSide: BorderSide(color: AppColors.orange2)),
                            ),
                            maxLines: 3,
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
                const SliverToBoxAdapter(child: SizedBox(height: 10)),
                SliverToBoxAdapter(
                  child: Card(
                    child: Padding(
                      padding: const EdgeInsets.all(7.5),
                      child: Text(
                        '–î–∞–ª–µ–µ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–µ–ª—è. –°—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –í—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è".',
                        style: AppTextStyles.subheaderBoldStyle
                            .copyWith(fontSize: 16, fontWeight: FontWeight.w400),
                        textAlign: TextAlign.center,
                      ),
                    ),
                  ),
                ),
                const SliverToBoxAdapter(child: SizedBox(height: 10)),
                SliverToBoxAdapter(
                  child: BlocListener<BookingBloc, BookingState>(
                    listener:(context, state) {
                      if (state is BookingCreated) {
                        Navigator.pushReplacementNamed(context, Routes.mainPage);
                        ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
                          content: Text("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ü•≥"),
                        ));
                      }

                      if (state is BookingError) {
                        ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                          content: Text(state.message),
                        ));
                      }
                    },
                    child: BlocBuilder<BookingBloc, BookingState>(
                      builder: (context, state) {
                        return CustomButton.load(
                      widget: state is BookingLoading ? const LoadingIndicator(
                        indicatorType: Indicator.ballSpinFadeLoader
                      ) : Text('–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å'),
                      mainAxisAlignment: MainAxisAlignment.center,
                      onPressed: () {
                        
                        final userId = BlocProvider.of<AuthBloc>(context).currentUser!.id;
                        Booking booking = Booking(
                          userIds: [userId], 
                          hotelId: widget.hotel.id, 
                          createdAt: DateTime.now(), 
                          startDate: _selectedPeriod.start, 
                          endDate: _selectedPeriod.end, 
                          description: _notesController.text, 
                          status: "waiting",
                        );
                      
                        context.read<BookingBloc>().add(CreateBooking(booking));
                      },
                      );
                      },
                    ),
                  
                  ),
                )
              ],
            ),
          )),
    );
  }
}
